name: 2 CD to AWS ECS, S3 and Prefect Cloud (Regular automated process)

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  PROJECT: mlops
  BLOCK: prod
  PREFECT_VERSION: 2.4
  ECS_CLUSTER: prefect-cluster
  AWS_REGION: us-east-1
  IMAGE_NAME: mlops
  CPU: 256
  MEMORY: 512
  S3_PATH: prefect-orion-storage-8

jobs:
  changes:
    name: Code & dependency changes
    runs-on: ubuntu-latest
    outputs:
      prefect_flows: ${{ steps.filter.outputs.flows_files }}
      prefect_flows_changed: ${{ steps.filter.outputs.flows }}
      code_dependencies_changed: ${{ steps.filter.outputs.code }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Markdown Summary
        run: echo "Starting CI/CD for flows and dependencies added/modified with commit $GITHUB_SHA" >> $GITHUB_STEP_SUMMARY
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: json
          filters: |
            flows:
              - added|modified: 'prefect/flows/*.py'
            code:
              - added|modified: 'prefect/requirements.txt'
              - added|modified: 'prefect/Dockerfile'
      - name: Generate Markdown Summary
        run: |
          echo Flows: ${{ steps.filter.outputs.flows_files }} >> $GITHUB_STEP_SUMMARY
          echo Code dependency changes: ${{ steps.filter.outputs.code_files }} >> $GITHUB_STEP_SUMMARY
  maintenance:
    runs-on: ubuntu-latest
    environment: github_action
    needs: changes
    if: ${{ needs.changes.outputs.prefect_flows_changed == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Python dependencies
        run: |
          pip install prefect==$PREFECT_VERSION
          pip install -r prefect/requirements.txt
          prefect block register -m prefect_aws.ecs

      - name: Prefect Cloud login
        run: |
          prefect config set PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY }} 
          prefect config set PREFECT_API_URL=${{ secrets.PREFECT_API_URL }}

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Create Blocks & Upload to S3
        id: aws_ecs_ecs_blocks
        run: |
          export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          echo $AWS_ACCOUNT_ID
          cat <<EOF > aws_ecs_blocks.py
          from prefect.filesystems import S3
          from prefect_aws.ecs import ECSTask, AwsCredentials

          id_ = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          key_ = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          path_ = "${{ env.S3_PATH }}"
          img_ = "${{ env.IMAGE_NAME }}"
          block_ = "${{ env.BLOCK }}"
          cluster_ = "${{ env.ECS_CLUSTER }}"
          cpu_ = "${{ env.CPU }}"
          memory_ = "${{ env.MEMORY }}"
          aws_acc_id = $AWS_ACCOUNT_ID
          exec_role = f"arn:aws:iam::{aws_acc_id}:role/{img_}-TaskRole"
          task_role = f"arn:aws:iam::{aws_acc_id}:role/{img_}-TaskExecutionRole"
          vpc_id =  "vpc-0f832cdef894374dc"
          cloudwatch_logs_options = { 
            "awslogs-group": "mlops",
            "awslogs-region": "us-east-1",
            "awslogs-create-group": "true",
            "awslogs-stream-prefix": "flow"
          }

          aws_creds = AwsCredentials(aws_access_key_id=id_, aws_secret_access_key=key_)
          aws_creds.save(block_, overwrite=True)

          s3 = S3(bucket_path=path_, aws_access_key_id=id_, aws_secret_access_key=key_)
          s3.save(block_, overwrite=True)
          
          ecs = ECSTask(
              aws_credentials=aws_creds,
              image=img_,
              cpu=cpu_,
              memory=memory_,
              stream_output=True,
              configure_cloudwatch_logs=True,
              cluster=cluster_,
              execution_role_arn=exec_role,
              task_role_arn=task_role,
              vpc_id=vpc_id
          )
          ecs.save(block_, overwrite=True)
          EOF
          python aws_ecs_blocks.py

  deploy:
    needs: [changes, maintenance]
    environment: github_action
    if: ${{ needs.changes.outputs.prefect_flows_changed == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flows: ${{ fromJson(needs.changes.outputs.prefect_flows) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Python dependencies
        run: |
          pip install prefect==$PREFECT_VERSION
          pip install -r prefect/requirements.txt

      - name: Prefect Cloud login
        run: |
          prefect config set PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY }} 
          prefect config set PREFECT_API_URL=${{ secrets.PREFECT_API_URL }}

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Deploy flows to S3
        id: build
        run: |
          FLOW_NAME=$(basename ${{ matrix.flows }} .py)
          python3 -c 'from prefect.flows.$FLOW_NAME import DEPLOYMENT; DEPLOYMENT.apply()'
          echo "flow_manifest=${FLOW_NAME}.yaml" >> $GITHUB_OUTPUT

      - name: Deploy flows to S3
        id: build
        run: |
          FLOW_NAME=$(basename ${{ matrix.flows }} .py)
          CRON="$(python3 -c 'from prefect.flows.$FLOW_NAME import CRON; print(CRON)')"
          QUEUE="$(python3 -c 'from prefect.flows.$FLOW_NAME import QUEUE; print(QUEUE)')"
          INFRASTRUCUTRE_BLOCK="$(python3 -c 'from prefect.flows.$FLOW_NAME import INFRASTRUCUTRE_BLOCK; print(INFRASTRUCUTRE_BLOCK)')"
          prefect deployment build ${{ matrix.flows }}:$FLOW_NAME -sb s3/$BLOCK -q $QUEUE -v $GITHUB_SHA -a -t $PROJECT -n $PROJECT -o $FLOW_NAME.yaml -ib $INFRASTRUCUTRE_BLOCK --cron $CRON
          echo "flow_manifest=${FLOW_NAME}.yaml" >> $GITHUB_OUTPUT

      - name: Upload YAML deployment manifest as artifact
        uses: actions/upload-artifact@v3
        with:
          name: Deployment YAML manifests
          path: ${{ steps.build.outputs.flow_manifest }}

  ecr-ecs-block:
    needs: changes
    environment: github_action
    if: ${{ needs.changes.outputs.code_dependencies_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Python dependencies
        run: |
          pip install prefect==$PREFECT_VERSION
          pip install prefect-aws
          prefect block register -m prefect_aws.ecs

      - name: Prefect Cloud login
        run: |
          prefect config set PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY }}
          prefect config set PREFECT_API_URL=${{ secrets.PREFECT_API_URL }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export IMAGE="$ECR_REGISTRY/$PROJECT:latest"
          docker build -t $IMAGE prefect/.
          docker tag $IMAGE "$ECR_REGISTRY/$PROJECT:$IMAGE_TAG"
          docker push $IMAGE
          docker push $ECR_REGISTRY/$PROJECT:$IMAGE_TAG
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Flow deployments finished
        run: echo "ECR image $ECR_REGISTRY/$PROJECT:$IMAGE_TAG built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name:
        run: aws ecs update-service --cluster prefect-cluster --service prefect-ecs-service --force-new-deployment

      - name: Prefect ECS block
        run: |
          cat <<EOF > ecs_block.py
          from prefect_aws.ecs import ECSTask
          
          block_ = "${{ env.BLOCK }}"
          ecs = ECSTask.load(block_)
          ecs.image = "${{ steps.build-image.outputs.image }}"
          ecs.save(block_, overwrite=True)
          
          EOF
          python ecs_block.py
